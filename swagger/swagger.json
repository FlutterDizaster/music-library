{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for managing music library data, including songs, lyrics, and related operations.",
        "title": "Music Library API",
        "contact": {
            "name": "Dmitriy Loginov",
            "email": "dmitriy@loginoff.space"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/library": {
            "get": {
                "description": "Retrieves the music library with optional filters and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Get songs library",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of songs to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of songs to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song band",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song release date (format: DD.MM.YYYY, valid values: \u003eDD.MM.YYYY, \u003cDD.MM.YYYY, DD.MM.YYYY, DD.MM.YYYY-DD.MM.YYYY)",
                        "name": "releaseDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song lyrics fragment",
                        "name": "text",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song link",
                        "name": "link",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Library"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/song": {
            "post": {
                "description": "Adds a new song to the music library.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Add a new song",
                "parameters": [
                    {
                        "description": "Song title details",
                        "name": "song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SongTitle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Song ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/song/{id}": {
            "delete": {
                "description": "Deletes a song by ID.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Delete a song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful (no content returned)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates details of an existing song.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Update a song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated song details",
                        "name": "song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Song"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful (no content returned)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/song/{id}/lyrics": {
            "get": {
                "description": "Retrieves the lyrics for a specific song by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Songs"
                ],
                "summary": "Get song lyrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of verses to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of verses to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Lyrics"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or query parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Library": {
            "description": "Response with music library and pagination.",
            "type": "object",
            "properties": {
                "pagination": {
                    "description": "Pagination",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Pagination"
                        }
                    ]
                },
                "songs": {
                    "description": "Songs list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Song"
                    }
                }
            }
        },
        "models.Lyrics": {
            "description": "Response with lyrics and pagination.",
            "type": "object",
            "properties": {
                "lyrics": {
                    "description": "Lyrics of the song",
                    "type": "string"
                },
                "pagination": {
                    "description": "Pagination",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Pagination"
                        }
                    ]
                }
            }
        },
        "models.Pagination": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.Song": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "Name of the band",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a unique identifier for the song",
                    "type": "string"
                },
                "link": {
                    "description": "Link to song",
                    "type": "string"
                },
                "releaseDate": {
                    "description": "Realease date of song format: DD-MM-YYYY",
                    "type": "string"
                },
                "song": {
                    "description": "Song title",
                    "type": "string"
                },
                "text": {
                    "description": "Lyrics",
                    "type": "string"
                }
            }
        },
        "models.SongTitle": {
            "description": "Song band and title.",
            "type": "object",
            "properties": {
                "group": {
                    "description": "Name of the band",
                    "type": "string"
                },
                "song": {
                    "description": "Song title",
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Operations about songs",
            "name": "Songs"
        }
    ]
}